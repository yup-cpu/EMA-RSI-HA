import streamlit as st
import pandas as pd
import numpy as np
import io
import requests
import re

# Import t·ª´ core.py
from core import load_data, compute_ema, compute_rsi, compute_ha, detect_signals_sequential

# ----------------------------
# Giao di·ªán Streamlit
# ----------------------------
st.set_page_config(page_title="Ph√¢n t√≠ch t√≠n hi·ªáu giao d·ªãch", layout="wide")
st.title("üìà Ph√¢n t√≠ch t√≠n hi·ªáu BUY / SELL")

# Ch·ªçn c√°ch t·∫£i d·ªØ li·ªáu
method = st.radio("üìÅ Ch·ªçn c√°ch t·∫£i d·ªØ li·ªáu:", ["T·∫£i t·ª´ m√°y (Upload)", "Nh·∫≠p ƒë∆∞·ªùng d·∫´n (URL)", "Google Drive ID"])
uploaded_file = None
url = ""
df = None

# Giao di·ªán nh·∫≠p d·ªØ li·ªáu
if method == "T·∫£i t·ª´ m√°y (Upload)":
    uploaded_file = st.file_uploader("üìÇ Ch·ªçn file CSV", type=["csv"])

elif method == "Nh·∫≠p ƒë∆∞·ªùng d·∫´n (URL)":
    url = st.text_input("üîó Nh·∫≠p URL t·ªõi file CSV:")

elif method == "Google Drive ID":
    raw_input = st.text_input("üîë Nh·∫≠p Google Drive file ID ho·∫∑c li√™n k·∫øt:")
    # T·ª± ƒë·ªông t√°ch ID n·∫øu d√°n link
    match = re.search(r'/d/([a-zA-Z0-9_-]+)', raw_input)
    if match:
        drive_id = match.group(1)
    else:
        drive_id = raw_input.strip()
    if drive_id:
        url = f"https://drive.google.com/uc?id={drive_id}"

# N√∫t t·∫£i file
if st.button("üì• Load File"):
    try:
        if method == "T·∫£i t·ª´ m√°y (Upload)" and uploaded_file:
            df = load_data(uploaded_file)

        elif method in ["Nh·∫≠p ƒë∆∞·ªùng d·∫´n (URL)", "Google Drive ID"] and url:
            response = requests.get(url)
            response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
            df = load_data(io.StringIO(response.text))

        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng cung c·∫•p file ho·∫∑c ƒë∆∞·ªùng d·∫´n h·ª£p l·ªá.")

    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu:\n\n{e}")

# N·∫øu c√≥ d·ªØ li·ªáu ‚Üí x·ª≠ l√Ω t√≠n hi·ªáu
if df is not None:
    st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    st.dataframe(df.head())

    with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch t√≠n hi·ªáu..."):
        open_, high, low, close = df['Open'].values, df['High'].values, df['Low'].values, df['Close'].values

        ema = compute_ema(close, 50)
        rsi = compute_rsi(close, 14)
        ha = compute_ha(open_, high, low, close)

        # Ch·ªâ d√πng ph·∫ßn d·ªØ li·ªáu c√≥ ƒë·ªß th√¥ng tin
        valid = ~np.isnan(rsi)
        ohlc = np.stack([open_[valid], high[valid], low[valid], close[valid]], axis=1)
        ema, rsi, ha = ema[valid], rsi[valid], ha[valid]

        idxs, types, prices, points = detect_signals_sequential(ohlc, ema, rsi, ha)

    # Th·ªëng k√™ t√≠n hi·ªáu
    col1, col2, col3 = st.columns(3)
    col1.metric("üìä T·ªïng t√≠n hi·ªáu", len(idxs))
    col2.metric("üîº BUY", int(np.sum(types == 1)))
    col3.metric("üîΩ SELL", int(np.sum(types == 0)))

    # B·∫£ng k·∫øt qu·∫£
    if len(idxs) > 0:
        valid_index = df.index[valid]
        if np.any(idxs >= len(valid_index)):
            st.error("‚ùå C√≥ ch·ªâ s·ªë t√≠n hi·ªáu v∆∞·ª£t qu√° s·ªë d√≤ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o.")
        else:
            df_result = pd.DataFrame({
                "Th·ªùi gian": valid_index[idxs],
                "Lo·∫°i l·ªánh": ["BUY" if t == 1 else "SELL" for t in types],
                "Gi√° v√†o l·ªánh": prices,
                "T·∫°i ƒëi·ªÉm": [ ["Open", "High", "Low", "Close"][p] for p in points ]
            })
            st.dataframe(df_result)
    else:
        st.info("‚ÑπÔ∏è Kh√¥ng c√≥ t√≠n hi·ªáu n√†o ƒë∆∞·ª£c ph√°t hi·ªán trong d·ªØ li·ªáu.")